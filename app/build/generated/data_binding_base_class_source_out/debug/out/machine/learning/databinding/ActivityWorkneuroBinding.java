// Generated by view binder compiler. Do not edit!
package machine.learning.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.navigation.NavigationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import machine.learning.R;

public final class ActivityWorkneuroBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView;

  @NonNull
  public final TextView activationFunction;

  @NonNull
  public final TextView activationFunctionText1;

  @NonNull
  public final TextView activationFunctionText2;

  @NonNull
  public final DrawerLayout drawerLayout;

  @NonNull
  public final FloatingActionButton fabScrollToTop;

  @NonNull
  public final ImageView leakyReluImg;

  @NonNull
  public final TextView linear;

  @NonNull
  public final ImageView linearImg;

  @NonNull
  public final NavigationView navView;

  @NonNull
  public final ImageView neuralNetImg;

  @NonNull
  public final TextView neuralWork;

  @NonNull
  public final TextView notLinear;

  @NonNull
  public final ImageView notLinearImg;

  @NonNull
  public final TextView perceptron;

  @NonNull
  public final ImageView perceptronImg;

  @NonNull
  public final ImageView reluImg;

  @NonNull
  public final ScrollView scrollView;

  @NonNull
  public final ImageView sigmoidImg;

  @NonNull
  public final TextView textView1;

  @NonNull
  public final TextView textView23;

  @NonNull
  public final Button themeLayout;

  @NonNull
  public final LinearLayout tipslearningContent;

  @NonNull
  public final TextView typesOfFunctions;

  @NonNull
  public final TextView typesOfFunctionsText1;

  @NonNull
  public final TextView typesOfFunctionsText3;

  @NonNull
  public final TextView whatsNeuralNetwork;

  @NonNull
  public final TextView whatsNeuralNetworkText1;

  @NonNull
  public final TextView whatsNeuralNetworkText2;

  @NonNull
  public final TextView workneuroMenu1;

  @NonNull
  public final TextView workneuroMenu2;

  @NonNull
  public final TextView workneuroMenu3;

  private ActivityWorkneuroBinding(@NonNull DrawerLayout rootView,
      @NonNull TextView activationFunction, @NonNull TextView activationFunctionText1,
      @NonNull TextView activationFunctionText2, @NonNull DrawerLayout drawerLayout,
      @NonNull FloatingActionButton fabScrollToTop, @NonNull ImageView leakyReluImg,
      @NonNull TextView linear, @NonNull ImageView linearImg, @NonNull NavigationView navView,
      @NonNull ImageView neuralNetImg, @NonNull TextView neuralWork, @NonNull TextView notLinear,
      @NonNull ImageView notLinearImg, @NonNull TextView perceptron,
      @NonNull ImageView perceptronImg, @NonNull ImageView reluImg, @NonNull ScrollView scrollView,
      @NonNull ImageView sigmoidImg, @NonNull TextView textView1, @NonNull TextView textView23,
      @NonNull Button themeLayout, @NonNull LinearLayout tipslearningContent,
      @NonNull TextView typesOfFunctions, @NonNull TextView typesOfFunctionsText1,
      @NonNull TextView typesOfFunctionsText3, @NonNull TextView whatsNeuralNetwork,
      @NonNull TextView whatsNeuralNetworkText1, @NonNull TextView whatsNeuralNetworkText2,
      @NonNull TextView workneuroMenu1, @NonNull TextView workneuroMenu2,
      @NonNull TextView workneuroMenu3) {
    this.rootView = rootView;
    this.activationFunction = activationFunction;
    this.activationFunctionText1 = activationFunctionText1;
    this.activationFunctionText2 = activationFunctionText2;
    this.drawerLayout = drawerLayout;
    this.fabScrollToTop = fabScrollToTop;
    this.leakyReluImg = leakyReluImg;
    this.linear = linear;
    this.linearImg = linearImg;
    this.navView = navView;
    this.neuralNetImg = neuralNetImg;
    this.neuralWork = neuralWork;
    this.notLinear = notLinear;
    this.notLinearImg = notLinearImg;
    this.perceptron = perceptron;
    this.perceptronImg = perceptronImg;
    this.reluImg = reluImg;
    this.scrollView = scrollView;
    this.sigmoidImg = sigmoidImg;
    this.textView1 = textView1;
    this.textView23 = textView23;
    this.themeLayout = themeLayout;
    this.tipslearningContent = tipslearningContent;
    this.typesOfFunctions = typesOfFunctions;
    this.typesOfFunctionsText1 = typesOfFunctionsText1;
    this.typesOfFunctionsText3 = typesOfFunctionsText3;
    this.whatsNeuralNetwork = whatsNeuralNetwork;
    this.whatsNeuralNetworkText1 = whatsNeuralNetworkText1;
    this.whatsNeuralNetworkText2 = whatsNeuralNetworkText2;
    this.workneuroMenu1 = workneuroMenu1;
    this.workneuroMenu2 = workneuroMenu2;
    this.workneuroMenu3 = workneuroMenu3;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWorkneuroBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWorkneuroBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_workneuro, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWorkneuroBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activation_function;
      TextView activationFunction = ViewBindings.findChildViewById(rootView, id);
      if (activationFunction == null) {
        break missingId;
      }

      id = R.id.activation_function_text1;
      TextView activationFunctionText1 = ViewBindings.findChildViewById(rootView, id);
      if (activationFunctionText1 == null) {
        break missingId;
      }

      id = R.id.activation_function_text2;
      TextView activationFunctionText2 = ViewBindings.findChildViewById(rootView, id);
      if (activationFunctionText2 == null) {
        break missingId;
      }

      DrawerLayout drawerLayout = (DrawerLayout) rootView;

      id = R.id.fabScrollToTop;
      FloatingActionButton fabScrollToTop = ViewBindings.findChildViewById(rootView, id);
      if (fabScrollToTop == null) {
        break missingId;
      }

      id = R.id.leaky_relu_img;
      ImageView leakyReluImg = ViewBindings.findChildViewById(rootView, id);
      if (leakyReluImg == null) {
        break missingId;
      }

      id = R.id.linear;
      TextView linear = ViewBindings.findChildViewById(rootView, id);
      if (linear == null) {
        break missingId;
      }

      id = R.id.linear_img;
      ImageView linearImg = ViewBindings.findChildViewById(rootView, id);
      if (linearImg == null) {
        break missingId;
      }

      id = R.id.nav_view;
      NavigationView navView = ViewBindings.findChildViewById(rootView, id);
      if (navView == null) {
        break missingId;
      }

      id = R.id.neural_net_img;
      ImageView neuralNetImg = ViewBindings.findChildViewById(rootView, id);
      if (neuralNetImg == null) {
        break missingId;
      }

      id = R.id.neural_work;
      TextView neuralWork = ViewBindings.findChildViewById(rootView, id);
      if (neuralWork == null) {
        break missingId;
      }

      id = R.id.not_linear;
      TextView notLinear = ViewBindings.findChildViewById(rootView, id);
      if (notLinear == null) {
        break missingId;
      }

      id = R.id.not_linear_img;
      ImageView notLinearImg = ViewBindings.findChildViewById(rootView, id);
      if (notLinearImg == null) {
        break missingId;
      }

      id = R.id.perceptron;
      TextView perceptron = ViewBindings.findChildViewById(rootView, id);
      if (perceptron == null) {
        break missingId;
      }

      id = R.id.perceptron_img;
      ImageView perceptronImg = ViewBindings.findChildViewById(rootView, id);
      if (perceptronImg == null) {
        break missingId;
      }

      id = R.id.relu_img;
      ImageView reluImg = ViewBindings.findChildViewById(rootView, id);
      if (reluImg == null) {
        break missingId;
      }

      id = R.id.scrollView;
      ScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.sigmoid_img;
      ImageView sigmoidImg = ViewBindings.findChildViewById(rootView, id);
      if (sigmoidImg == null) {
        break missingId;
      }

      id = R.id.textView1;
      TextView textView1 = ViewBindings.findChildViewById(rootView, id);
      if (textView1 == null) {
        break missingId;
      }

      id = R.id.textView23;
      TextView textView23 = ViewBindings.findChildViewById(rootView, id);
      if (textView23 == null) {
        break missingId;
      }

      id = R.id.themeLayout;
      Button themeLayout = ViewBindings.findChildViewById(rootView, id);
      if (themeLayout == null) {
        break missingId;
      }

      id = R.id.tipslearning_content;
      LinearLayout tipslearningContent = ViewBindings.findChildViewById(rootView, id);
      if (tipslearningContent == null) {
        break missingId;
      }

      id = R.id.types_of_functions;
      TextView typesOfFunctions = ViewBindings.findChildViewById(rootView, id);
      if (typesOfFunctions == null) {
        break missingId;
      }

      id = R.id.types_of_functions_text1;
      TextView typesOfFunctionsText1 = ViewBindings.findChildViewById(rootView, id);
      if (typesOfFunctionsText1 == null) {
        break missingId;
      }

      id = R.id.types_of_functions_text3;
      TextView typesOfFunctionsText3 = ViewBindings.findChildViewById(rootView, id);
      if (typesOfFunctionsText3 == null) {
        break missingId;
      }

      id = R.id.whats_neural_network;
      TextView whatsNeuralNetwork = ViewBindings.findChildViewById(rootView, id);
      if (whatsNeuralNetwork == null) {
        break missingId;
      }

      id = R.id.whats_neural_network_text1;
      TextView whatsNeuralNetworkText1 = ViewBindings.findChildViewById(rootView, id);
      if (whatsNeuralNetworkText1 == null) {
        break missingId;
      }

      id = R.id.whats_neural_network_text2;
      TextView whatsNeuralNetworkText2 = ViewBindings.findChildViewById(rootView, id);
      if (whatsNeuralNetworkText2 == null) {
        break missingId;
      }

      id = R.id.workneuro_menu1;
      TextView workneuroMenu1 = ViewBindings.findChildViewById(rootView, id);
      if (workneuroMenu1 == null) {
        break missingId;
      }

      id = R.id.workneuro_menu2;
      TextView workneuroMenu2 = ViewBindings.findChildViewById(rootView, id);
      if (workneuroMenu2 == null) {
        break missingId;
      }

      id = R.id.workneuro_menu3;
      TextView workneuroMenu3 = ViewBindings.findChildViewById(rootView, id);
      if (workneuroMenu3 == null) {
        break missingId;
      }

      return new ActivityWorkneuroBinding((DrawerLayout) rootView, activationFunction,
          activationFunctionText1, activationFunctionText2, drawerLayout, fabScrollToTop,
          leakyReluImg, linear, linearImg, navView, neuralNetImg, neuralWork, notLinear,
          notLinearImg, perceptron, perceptronImg, reluImg, scrollView, sigmoidImg, textView1,
          textView23, themeLayout, tipslearningContent, typesOfFunctions, typesOfFunctionsText1,
          typesOfFunctionsText3, whatsNeuralNetwork, whatsNeuralNetworkText1,
          whatsNeuralNetworkText2, workneuroMenu1, workneuroMenu2, workneuroMenu3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
